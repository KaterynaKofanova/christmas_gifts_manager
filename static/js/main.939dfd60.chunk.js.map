{"version":3,"sources":["utils.tsx","components/Cart.tsx","components/AllCarts.tsx","components/Confirmation.tsx","App.tsx","index.tsx"],"names":["capitalizeFirstLetter","string","charAt","toUpperCase","slice","Cart","cart","setCarts","carts","setDiscount","totalPrice","products","reduce","acc","val","price","approvedQuantity","className","name","firstname","map","product","title","quantity","type","min","max","value","onChange","event","productId","updating","find","updated","id","userId","updatedCarts","discount","uniqueProductIds","forEach","a","push","discounts","exists","v","checkDiscount","handleQuantityChange","currentTarget","toFixed","AllCarts","totalDiscount","view","setView","useState","instructions","setInstructions","length","style","textAlign","onClick","marginTop","approved","date","filter","discarded","axios","post","error","console","message","Confirmation","App","fetchCarts","get","resp","data","cartsReady","productInfo","category","description","image","useEffect","window","scrollTo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.939dfd60.chunk.js","sourcesContent":["import { cart } from \"./types\";\n\ninterface uniqueProduct {\n  id: number;\n  price: number;\n}\n\nexport const capitalizeFirstLetter = (string: string): string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nexport const checkDiscount = (carts: cart[]): number => {\n  const uniqueProductIds: uniqueProduct[] = carts.reduce(\n    (acc: uniqueProduct[], val) => {\n      val.products.forEach((product) => {\n        if (!acc.find((a) => a.id === product.id)) {\n          acc.push({ id: product.id, price: product.price });\n        }\n      });\n      return acc;\n    },\n    []\n  );\n  let discounts: number = 0;\n  uniqueProductIds.forEach((product) => {\n    const quantity: number = carts.reduce((acc: number, val: cart) => {\n      const exists = val.products.find((v) => v.id === product.id);\n      if (exists && exists.approvedQuantity > 0) {\n        acc += 1;\n      }\n      return acc;\n    }, 0);\n    if (quantity > 1) {\n      discounts += quantity * 0.1 * product.price * quantity;\n    }\n  });\n  return discounts;\n};\n","import React from \"react\";\nimport { cart, name } from \"../types\";\nimport { capitalizeFirstLetter, checkDiscount } from \"../utils\";\n\ninterface CartProps {\n  cart: cart;\n  setCarts: (carts: cart[]) => void;\n  carts: cart[];\n  setDiscount: (discount: number) => void;\n}\n\nconst Cart: React.FC<CartProps> = ({ cart, setCarts, carts, setDiscount }) => {\n  const handleQuantityChange = (\n    name: name,\n    productId: number,\n    quantity: number\n  ): void => {\n    const updating: cart | undefined = carts.find((cart) => cart.name === name);\n    if (updating) {\n      const updated: cart = {\n        id: updating.id,\n        userId: updating.userId,\n        name: updating.name,\n        products: updating.products.map((product) =>\n          product.id === productId\n            ? { ...product, approvedQuantity: quantity }\n            : product\n        ),\n      };\n      const updatedCarts: cart[] = carts.map((cart) =>\n        cart.name === name ? updated : cart\n      );\n      setCarts(updatedCarts);\n      const discount: number = checkDiscount(updatedCarts);\n      setDiscount(discount);\n    }\n  };\n\n  const totalPrice: number = cart.products.reduce(\n    (acc, val) => acc + val.price * val.approvedQuantity,\n    0\n  );\n  return (\n    <div className=\"cart\">\n      <h3>{capitalizeFirstLetter(cart.name.firstname)}'s Christmas wishlist</h3>\n      <table>\n        <colgroup>\n          <col className=\"col1\" />\n          <col className=\"col2\" />\n          <col className=\"col3\" />\n          <col className=\"col4\" />\n        </colgroup>\n        <tbody>\n          <tr>\n            <th>Gift</th>\n            <th>Desired quantity</th>\n            <th>Price</th>\n            <th>Approved quantity</th>\n          </tr>\n          {cart.products.map((product) => (\n            <tr key={product.id}>\n              <td>{product.title}</td>\n              <td>{product.quantity}</td>\n              <td>{product.price}</td>\n              <td>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max={product.quantity}\n                  value={product.approvedQuantity}\n                  onChange={(event: React.FormEvent<HTMLInputElement>) =>\n                    handleQuantityChange(\n                      cart.name,\n                      product.id,\n                      +event.currentTarget.value\n                    )\n                  }\n                />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <div className=\"cart-total\">Total price: {totalPrice.toFixed(2)}</div>\n    </div>\n  );\n};\n\nexport default Cart;\n","import React, { useState } from \"react\";\nimport { cart, apiCartPost } from \"../types\";\nimport Cart from \"./Cart\";\nimport axios from \"axios\";\n\ninterface AllCartsProps {\n  carts: cart[];\n  totalPrice: number;\n  totalDiscount: number;\n  setCarts: (carts: cart[]) => void;\n  setDiscount: (discount: number) => void;\n  view: string;\n  setView: (view: string) => void;\n}\n\nconst AllCarts: React.FC<AllCartsProps> = ({\n  carts,\n  setCarts,\n  setDiscount,\n  totalPrice,\n  totalDiscount,\n  view,\n  setView,\n}) => {\n  const [instructions, setInstructions] = useState<boolean>(false);\n  const handleSave = (): void => {\n    for (let cart of carts) {\n      const approved: apiCartPost = {\n        userId: cart.userId,\n        date: \"date\",\n        products: cart.products\n          .map((product) => {\n            return {\n              productId: product.id,\n              quantity: product.approvedQuantity,\n            };\n          })\n          .filter((product) => product.quantity !== 0),\n      };\n      const discarded: apiCartPost = {\n        userId: cart.userId,\n        date: \"date\",\n        products: cart.products\n          .map((product) => {\n            return {\n              productId: product.id,\n              quantity: product.quantity - product.approvedQuantity,\n            };\n          })\n          .filter((product) => product.quantity !== 0),\n      };\n      try {\n        axios.post(\"https://fakestoreapi.com/carts\", approved);\n        axios.post(\"https://fakestoreapi.com/carts\", discarded);\n      } catch (error) {\n        console.error(error.message);\n      }\n    }\n    setView(\"Confirmation\");\n  };\n  if (view === \"AllCarts\") {\n    if (carts.length < 1) {\n      return (\n        <div style={{ textAlign: \"center\" }}>\n          <span className=\"loader\"></span> Loading data...\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"allCarts\">\n          {instructions ? (\n            <div className=\"instructions\">\n              <p>Welcome to Christmas Gifts Manager!</p>\n              <p>\n                Here you can see all your children's wishlists for Christmas\n                gifts.\n              </p>\n              <p>You can approve items in the 'Approved quantity' column.</p>\n              <p>\n                If you approve the same product in different children's\n                wishlists you can get a discount for it:\n                <br /> 20% if it is approved in 2 lists, 30% if in 3 lists and\n                so on.\n              </p>\n              <p>\n                You can see your current discount on the botton of the page.\n              </p>\n              <button onClick={() => setInstructions(false)}>Close</button>\n            </div>\n          ) : (\n            <button\n              onClick={() => setInstructions(true)}\n              style={{ marginTop: \"1em\" }}\n            >\n              Read instructions\n            </button>\n          )}\n\n          {carts.map((cart) => (\n            <Cart\n              cart={cart}\n              setCarts={setCarts}\n              carts={carts}\n              setDiscount={setDiscount}\n              key={cart.userId}\n            />\n          ))}\n          <div className=\"totals\">\n            <div>Total Price: {totalPrice.toFixed(2)}</div>\n            <div>Total Discount: {totalDiscount.toFixed(2)}</div>\n            <div>\n              Price with discount: {(totalPrice - totalDiscount).toFixed(2)}\n            </div>\n          </div>\n          <button onClick={handleSave} id=\"btn-save\">\n            Save\n          </button>\n        </div>\n      );\n    }\n  } else {\n    return null;\n  }\n};\n\nexport default AllCarts;\n","import React from \"react\";\nimport { cart } from \"../types\";\nimport { capitalizeFirstLetter } from \"../utils\";\n\ninterface ConfirmationProps {\n  carts: cart[];\n  totalPrice: number;\n  totalDiscount: number;\n  view: string;\n  setView: (view: string) => void;\n}\n\nconst Confirmation: React.FC<ConfirmationProps> = ({\n  carts,\n  totalPrice,\n  totalDiscount,\n  view,\n  setView,\n}) => {\n  if (view === \"Confirmation\") {\n    return (\n      <div className=\"confirmation\">\n        <p>\n          Changes were saved successfully! Here is a summary of approved and\n          discarded gifts:\n        </p>\n        {carts.map((cart) => (\n          <div key={cart.userId} className=\"confirm-cart\">\n            <h4>{capitalizeFirstLetter(cart.name.firstname)}'s</h4>\n            <table>\n              <colgroup>\n                <col className=\"col1\" />\n                <col className=\"col2\" />\n                <col className=\"col3\" />\n                <col className=\"col4\" />\n              </colgroup>\n              <tbody>\n                <tr>\n                  <th>Gift</th>\n                  <th>Discarded quantity</th>\n                  <th>Approved quantity</th>\n                  <th>Approved price</th>\n                </tr>\n                {cart.products.map((product) => (\n                  <tr key={product.id}>\n                    <td>{product.title}</td>\n                    <td>{product.quantity - product.approvedQuantity}</td>\n                    <td>{product.approvedQuantity}</td>\n                    <td>\n                      {(product.price * product.approvedQuantity).toFixed(2)}\n                    </td>\n                  </tr>\n                ))}\n                <tr className=\"confirm-cart-totals\">\n                  <td>Total:</td>\n                  <td>\n                    {cart.products.reduce((acc, val) => {\n                      acc += val.quantity - val.approvedQuantity;\n                      return acc;\n                    }, 0)}\n                  </td>\n                  <td>\n                    {cart.products.reduce((acc, val) => {\n                      acc += val.approvedQuantity;\n                      return acc;\n                    }, 0)}\n                  </td>\n                  <td>\n                    {cart.products\n                      .reduce((acc, val) => {\n                        acc += val.approvedQuantity * val.price;\n                        return acc;\n                      }, 0)\n                      .toFixed(2)}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        ))}\n        <div className=\"totals\">\n          <div>Total Price: {totalPrice.toFixed(2)}</div>\n          <div>Total Discount: {totalDiscount.toFixed(2)}</div>\n          <div>\n            Price with discount: {(totalPrice - totalDiscount).toFixed(2)}\n          </div>\n        </div>\n        <button onClick={() => setView(\"AllCarts\")}>Go back</button>\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default Confirmation;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { cart, product, apiCart, apiProduct, apiUser } from \"./types\";\nimport AllCarts from \"./components/AllCarts\";\nimport Confirmation from \"./components/Confirmation\";\nimport { FaTree, FaGifts } from \"react-icons/fa\";\n\nconst App: React.FC = () => {\n  const [carts, setCarts] = useState<cart[]>([]);\n  const [totalDiscount, setDiscount] = useState<number>(0);\n  const [view, setView] = useState<string>(\"AllCarts\");\n\n  const fetchCarts = async () => {\n    try {\n      const resp = await axios.get<apiCart[]>(\"https://fakestoreapi.com/carts\");\n      const carts: apiCart[] = resp.data.reduce((acc: apiCart[], cart) => {\n        const userExists = acc.find(({ userId }) => cart.userId === userId);\n        if (!userExists) {\n          acc.push(cart);\n        }\n        return acc;\n      }, []);\n      let cartsReady: cart[] = [];\n      for (let cart of carts) {\n        const resp = await axios.get<apiUser>(\n          `https://fakestoreapi.com/users/${cart.userId}`\n        );\n        let name = resp.data.name;\n        let products: product[] = [];\n        for (let product of cart.products) {\n          const resp = await axios.get<apiProduct>(\n            `https://fakestoreapi.com/products/${product.productId}`\n          );\n          const productInfo = resp.data;\n          products.push({\n            id: productInfo.id,\n            title: productInfo.title,\n            price: productInfo.price,\n            category: productInfo.category,\n            description: productInfo.description,\n            image: productInfo.image,\n            quantity: product.quantity,\n            approvedQuantity: 0,\n          });\n        }\n        cartsReady.push({\n          id: cart.id,\n          userId: cart.userId,\n          name,\n          products,\n        });\n      }\n      setCarts(cartsReady);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  useEffect(() => {\n    fetchCarts();\n  }, []);\n\n  useEffect(()=> {\n    window.scrollTo(0,0)\n\n  }, [view])\n\n  const totalPrice: number = carts.reduce(\n    (acc, val) =>\n      acc +\n      val.products.reduce(\n        (acc, val) => acc + val.price * val.approvedQuantity,\n        0\n      ),\n    0\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h2 className=\"header-content\">\n          <FaGifts /> Christmas Gifts Manager <FaTree />\n        </h2>\n      </div>\n      <div className=\"content\">\n        <AllCarts\n          carts={carts}\n          setCarts={setCarts}\n          setDiscount={setDiscount}\n          totalPrice={totalPrice}\n          totalDiscount={totalDiscount}\n          view={view}\n          setView={setView}\n        />\n        <Confirmation\n          carts={carts}\n          totalPrice={totalPrice}\n          totalDiscount={totalDiscount}\n          view={view}\n          setView={setView}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}